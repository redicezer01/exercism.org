package tournament

import "io"
import "fmt"
import "errors"
import "strings"
import "bytes"
import "sort"
import _ "text/tabrwiter"

const bToRead = 100

type ScoreRecord struct {
	Team string
	MP int
	W  int
	D  int
	L  int
	P  int
}

// Scoreboard type
type ScoreBType map[string]*ScoreRecord

// sort by Team Name (Descending)
type byTeamScoreB []*ScoreRecord
func (s byTeamScoreB) Len() int   	  { return len(s) }
func (s byTeamScoreB) Less(i, j int) bool { return s[i].Team < s[j].Team }
func (s byTeamScoreB) Swap(i, j int) 	  { s[i], s[j] = s[j], s[i] }

// sort by Point (Descending)
type byPointScoreB []*ScoreRecord
func (s byPointScoreB) Len() int   	   { return len(s) }
func (s byPointScoreB) Less(i, j int) bool { return s[i].P > s[j].P }
func (s byPointScoreB) Swap(i, j int) 	   { s[i], s[j] = s[j], s[i] }

// Score Board
var ScoreB ScoreBType

// tabwriter helps to avoid using it
// for formated output
var maxTeamName int

// Tally parse text and outpup Scoreboard
func Tally(reader io.Reader, writer io.Writer) error {
	ScoreB = ScoreBType{}	
	bchunk := make([]byte, bToRead)
	var btext bytes.Buffer
	
	// get text
	for {
		nbytes, err:= reader.Read(bchunk)
		if err == io.EOF {
			break
		} else if err != nil {
			return err
		}
		btext.Write(bchunk[:nbytes])
	}

	lineSlice := strings.Split(strings.Trim(btext.String()," "), "\n")

	for _, l := range lineSlice {

		splited := strings.Split(l, ";")

		if len(splited) < 2 {
			continue
		} else if len(splited) < 3 {
			return errors.New("incorrect input.")
		}

		err := fillScoreB(splited[0], splited[1], splited[2])
		if err != nil {
			return err
		}
	}
	
	_, err := writer.Write([]byte(stringScoreB()))	
	if err != nil {
		return err
	}

	return nil	 
}

/*
func stringScoreB() string {
	sb := make([]*ScoreRecord, len(ScoreB))
	index := 0
	for _, v := range ScoreB {
		sb[index] = v
		index++
	}
	sort.Sort(byTeamScoreB(sb))
	sort.Sort(byPointScoreB(sb))

	r := fmt.Sprintf("Team%s| MP |  W |  D |  L |  P\n", strings.Repeat(" ", 8+maxTeamName-4))
	i := 0
	for _, _ = range ScoreB {
		v := sb[i]
		r += fmt.Sprintf("%s%s|  %d |  %d |  %d |  %d |  %d", v.Team, 
				  strings.Repeat(" ", 8+maxTeamName-len(v.Team)), v.MP, v.W, v.D, v.L, v.P)
		if i < len(ScoreB) {
			r += "\n"
		}
		i++
	}
	return r
}
*/

func stringScoreB() string {
	sb := make([]*ScoreRecord, len(ScoreB))
	index := 0
	for _, v := range ScoreB {
		sb[index] = v
		index++
	}
	sort.Sort(byTeamScoreB(sb))
	sort.Sort(byPointScoreB(sb))

	r := fmt.Sprintf("Team%s| MP |  W |  D |  L |  P\n", strings.Repeat(" ", 8+maxTeamName-4))
	i := 0
	for _, _ = range ScoreB {
		v := sb[i]
		r += fmt.Sprintf("%s%s|  %d |  %d |  %d |  %d |  %d", v.Team, 
				  strings.Repeat(" ", 8+maxTeamName-len(v.Team)), v.MP, v.W, v.D, v.L, v.P)
		if i < len(ScoreB) {
			r += "\n"
		}
		i++
	}
	return r
}

// fillScoreB parses input text and fills scoreboard
func fillScoreB(team1, team2, res string) error {
	team1 = strings.Trim(team1, " ")
	team2 = strings.Trim(team2, " ")
	res = strings.Trim(res, " ")

	t1, ok := ScoreB[team1]
	if !ok {
		t1 = &ScoreRecord{Team: team1}
		ScoreB[team1] = t1
	}
	t1.MP += 1

	t2, ok := ScoreB[team2]
	if !ok {
		t2 = &ScoreRecord{Team: team2}
		ScoreB[team2] = t2
	}
	t2.MP += 1
	
	switch res {
	case "win":
		t1.W += 1
		t1.P += 3
		t2.L += 1
	case "loss":
		t1.L += 1
		t2.W += 1
		t2.P += 3
	case "draw":
		t1.D += 1
		t1.P += 1
		t2.D += 1
		t2.P += 1
	default:
		return errors.New("incorrrect input.")
	}		
	maxTeamName = len(team1)		
	if len(team1) < len(team2) {
		maxTeamName = len(team2)		
	}
	return nil
}
